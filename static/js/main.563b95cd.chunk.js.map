{"version":3,"sources":["api/apiRequests.js","components/episode/EpisodeCard.js","components/LoaderComp.js","pages/MainPage.js","utils/Methods.js","components/character/CharacterCard.js","pages/EpisodeDetailsPage.js","assets/alive.gif","assets/dead.gif","assets/unknown.gif","pages/CharacterDetailsPage.js","components/navigation/PageRouter.js","assets/iconfinder_rick_2981856.png","components/navigation/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["getEpisodes","id","axios","get","getCharacters","EpisodeCard","props","episode","Card","as","Link","className","to","Content","Header","name","Meta","Description","style","marginBottom","air_date","Label","color","ribbon","characters","length","LoaderComp","loading","Dimmer","active","page","Loader","indeterminate","MainPage","useState","episodes","setEpisodes","info","setInfo","activePage","setActivePage","setLoading","useEffect","window","scroll","then","response","data","results","Grid","Column","Row","size","Group","centered","doubling","itemsPerRow","marginTop","map","Menu","stackable","basic","Item","count","position","Pagination","pointing","secondary","onPageChange","e","boundaryRange","ellipsisItem","firstItem","lastItem","siblingRange","totalPages","pages","findLastFromUrl","url","substr","lastIndexOf","CharacterCard","char","Image","circular","src","Subheader","species","Button","options","key","text","value","EpisodeDetailsPage","setEpisode","setCharacters","cloneCharacters","setCloneCharacters","searchKeyword","setSearchKeyword","setSortValue","episodeId","location","pathname","response1","join","response2","Segment","vertical","Container","Dropdown","item","placeholder","onChange","sortedCharacters","arr","val","sort","a","b","localeCompare","sortMethod","Input","icon","filteredCharacters","filter","toLowerCase","includes","container","textAlign","columns","CharacterDetailsPage","status","match","character","setCharacter","characterEpisodes","setCharacterEpisodes","scrollTo","params","console","log","width","gender","List","origin","bordered","aliveGif","deadGif","unknownGif","PageRouter","exact","path","component","NavBar","fixed","header","Icon","marginRight","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.563b95cd.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const getEpisodesForPage = (page) => {\n    const url = '/api/episode'\n    return axios.get(\"https://rickandmortyapi.com\"+url + \"?page=\" + page)\n}\n\nexport const getEpisodes = (id) => {\n    const url = '/api/episode'\n    return axios.get(\"https://rickandmortyapi.com\"+url + \"/\" + id)\n}\n\nexport const getCharacters = (id) => {\n    const url = '/api/character'\n    return axios.get(\"https://rickandmortyapi.com\"+url + \"/\" + id)\n}","import React from 'react';\nimport {Card, Label} from \"semantic-ui-react\";\nimport {Link} from \"react-router-dom\";\n\nfunction EpisodeCard(props) {\n    const {episode} = props\n    return (\n        <Card as={Link} className='fade-in' key={episode.id} to={\"/animated-winner/episode-details/\" + episode.id}>\n            <Card.Content>\n                <Card.Header className={'textOverflow'}>{episode.name}</Card.Header>\n                <Card.Meta>{episode.episode}</Card.Meta>\n                <Card.Description style={{marginBottom: 5}}>\n                    {episode.air_date}\n                </Card.Description>\n                <Label color='blue' ribbon={\"right\"}>\n                    Character Count: {episode.characters?.length}\n                </Label>\n            </Card.Content>\n        </Card>\n    );\n}\n\nexport default EpisodeCard;","import React from 'react';\nimport {Dimmer, Loader} from \"semantic-ui-react\";\n\nfunction LoaderComp({loading}) {\n    return (\n        <>\n            <Dimmer active={loading} page>\n                <Loader indeterminate>Loading</Loader>\n            </Dimmer>\n        </>\n    );\n}\n\nexport default LoaderComp;","import React, {useEffect, useState} from 'react';\nimport {getEpisodesForPage} from \"../api/apiRequests\";\nimport {Card, Grid, Header, Menu, Pagination} from \"semantic-ui-react\";\nimport EpisodeCard from \"../components/episode/EpisodeCard\";\nimport LoaderComp from \"../components/LoaderComp\";\n\n\nfunction MainPage() {\n\n    const [episodes, setEpisodes] = useState([])\n    const [info, setInfo] = useState({})\n    const [activePage, setActivePage] = useState(1)\n    const [loading, setLoading] = useState(false)\n\n\n    useEffect(() => {\n        window.scroll(0, 0)\n        setLoading(true)\n        getEpisodesForPage(activePage).then(response => {\n            setEpisodes(response?.data?.results)\n            setInfo(response?.data?.info)\n            setLoading(false)\n        })\n    }, [activePage])\n\n    const handlePaginationChange = (e, {activePage}) => {\n        setActivePage(activePage)\n    }\n\n\n    return (\n        <div>\n            <LoaderComp loading={loading}/>\n            {!loading && <Grid>\n                <Grid.Column>\n                    <Grid.Row>\n                        <Header size={\"large\"}>Rick And Morty Episodes</Header>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Card.Group centered doubling itemsPerRow={4} style={{marginTop: 18}}>\n                            {episodes.map((episode) => {\n                                return <EpisodeCard episode={episode} key={episode.id}/>\n                            })}\n                        </Card.Group>\n                    </Grid.Row>\n                    <Grid.Row>\n                        {episodes.length > 0 &&\n                        <Menu stackable basic={\"true\"} style={{marginTop: 22}}>\n                            <Menu.Item>\n                                Page Count: {episodes?.length}\n                            </Menu.Item>\n                            <Menu.Item>\n                                Total Count: {info?.count}\n                            </Menu.Item>\n                            <Menu.Item position='right'>\n                                <Pagination\n                                    stackable\n                                    pointing\n                                    secondary\n                                    onPageChange={handlePaginationChange}\n                                    activePage={activePage}\n                                    boundaryRange={0}\n                                    ellipsisItem={null}\n                                    firstItem={null}\n                                    lastItem={null}\n                                    siblingRange={1}\n                                    totalPages={info?.pages || 1}\n                                />\n                            </Menu.Item>\n                        </Menu>\n                        }\n                    </Grid.Row>\n                </Grid.Column>\n            </Grid>}\n        </div>\n    );\n}\n\nexport default MainPage;","export const findLastFromUrl = url => {\n    return url.substr(url.lastIndexOf(\"/\") + 1)\n}\n\nexport const sortMethod = (arr, val) => {\n    switch (val) {\n        case \"NAME_DESC\":\n            arr = arr.sort((a, b) => a.name.localeCompare(b.name))\n            return arr\n        case \"NAME_ASC\":\n            arr = arr.sort((a, b) => b.name.localeCompare(a.name))\n            return arr\n        default:\n            return arr\n    }\n}","import React from 'react';\nimport {Button, Grid, Header, Image} from \"semantic-ui-react\";\nimport {Link} from \"react-router-dom\";\n\nconst CharacterCard = ({char}) => {\n    return (\n        <Grid.Column>\n            <Image\n                loading='lazy'\n                centered\n                circular\n                size=\"small\"\n                src={\"https://rickandmortyapi.com/api/character/avatar/\" + char?.id + \".jpeg\"}\n            />\n            <Header as=\"h3\">\n                {char.name}\n                <Header.Subheader>\n                    {char.species}\n                </Header.Subheader>\n            </Header>\n\n            <Button as={Link} basic to={\"/animated-winner/character-details/\" + char.id}>View details &raquo;</Button>\n        </Grid.Column>\n    );\n}\n\nexport default CharacterCard;","import React, {useEffect, useState} from 'react';\nimport {getCharacters, getEpisodes} from \"../api/apiRequests\";\nimport {Container, Dropdown, Grid, Header, Input, Menu, Segment} from \"semantic-ui-react\";\nimport {findLastFromUrl, sortMethod} from \"../utils/Methods\";\nimport CharacterCard from \"../components/character/CharacterCard\";\nimport LoaderComp from \"../components/LoaderComp\";\n\nconst options = [\n    {key: 1, text: 'Sort By Name Desc', value: \"NAME_DESC\"},\n    {key: 2, text: 'Sort By Name Asc', value: \"NAME_ASC\"},\n]\n\n\nconst EpisodeDetailsPage = (props) => {\n\n    const [episode, setEpisode] = useState({})\n    const [characters, setCharacters] = useState([])\n    const [cloneCharacters, setCloneCharacters] = useState([])\n    const [searchKeyword, setSearchKeyword] = useState(\"\")\n    const [sortValue, setSortValue] = useState(null)\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n        window.scroll(0, 0)\n        setLoading(true)\n        const episodeId = findLastFromUrl(props?.location?.pathname)\n        getEpisodes(episodeId).then(response1 => {\n            setEpisode(response1?.data)\n            let characterIdArray = response1?.data?.characters.map(char => {\n                return findLastFromUrl(char)\n            })\n            let url = characterIdArray.join()\n            getCharacters(url).then(response2 => {\n                setCharacters(response2.data)\n                setCloneCharacters(response2.data)\n                setLoading(false)\n            })\n        })\n    }, [])\n\n    const onChangeSearch = (e, {value}) => {\n        setSearchKeyword(value)\n        let filteredCharacters = cloneCharacters.filter(char => char.name.toLowerCase().includes(value.toLowerCase()))\n        setCharacters(filteredCharacters)\n    }\n\n    const onChangeSort = (e, {value}) => {\n        setSortValue(value)\n        const sortedCharacters = sortMethod(characters, value)\n        setCharacters(sortedCharacters)\n    }\n\n    return (\n        <>\n            <LoaderComp loading={loading}/>\n            {!loading && <Segment vertical>\n                <Container>\n                    <Header size={\"large\"}>{episode?.episode} - {episode?.name}\n                        <Header.Subheader>\n                            {episode?.air_date}\n                        </Header.Subheader>\n                    </Header>\n                    <Menu basic={\"true\"} stackable>\n                        <Menu.Item>\n                            <Header>Characters</Header>\n                        </Menu.Item>\n                        <Dropdown item={true} placeholder='Sort'\n                                  options={options}\n                                  onChange={onChangeSort}/>\n                        <Menu.Item position='right'>\n                            <Input className='icon' icon='search' placeholder='Search...' value={searchKeyword}\n                                   onChange={onChangeSearch}/>\n                        </Menu.Item>\n\n                    </Menu>\n                </Container>\n                <Grid container stackable textAlign=\"center\" columns={4} style={{marginTop: 22}}>\n                    {characters.map(char => {\n                        return <CharacterCard char={char} key={char.id}/>\n                    })}\n                    <Grid.Row>\n                        <Header>\n                            {searchKeyword === \"\" ? <>Total\n                                Characters: {characters?.length} </> : <>Results: {characters?.length}</>}\n                        </Header></Grid.Row>\n                </Grid>\n            </Segment>}\n        </>\n    );\n};\n\nexport default EpisodeDetailsPage;","export default __webpack_public_path__ + \"static/media/alive.5cdc1e8c.gif\";","export default __webpack_public_path__ + \"static/media/dead.d00965bf.gif\";","export default __webpack_public_path__ + \"static/media/unknown.df2e9540.gif\";","import React, {useEffect, useState} from 'react';\nimport {Card, Container, Grid, Header, Image, List} from \"semantic-ui-react\";\nimport deadGif from '../assets/alive.gif'\nimport aliveGif from '../assets/dead.gif'\nimport unknownGif from '../assets/unknown.gif'\nimport {findLastFromUrl} from \"../utils/Methods\";\nimport {getCharacters, getEpisodes} from \"../api/apiRequests\";\nimport EpisodeCard from \"../components/episode/EpisodeCard\";\nimport LoaderComp from \"../components/LoaderComp\";\n\nconst CharacterDetailsPage = ({match}) => {\n    const [character, setCharacter] = useState({})\n    const [characterEpisodes, setCharacterEpisodes] = useState([])\n    const [loading, setLoading] = useState(false)\n\n    const imageSelector = status => {\n        if (status === \"Dead\") {\n            return <Image circular bordered src={aliveGif}/>\n        }\n        if (status === \"Alive\") {\n            return <Image circular bordered src={deadGif}/>\n        }\n        if (status === \"unknown\") {\n            return <Image circular bordered src={unknownGif}/>\n        }\n    }\n\n    useEffect(() => {\n        window.scrollTo(0, 0)\n        setLoading(true)\n        getCharacters(match?.params?.id).then(response1 => {\n            setCharacter(response1.data)\n            let episodes = response1?.data?.episode.map(url => {\n                return findLastFromUrl(url)\n            })\n            episodes = episodes.length === 1 ? episodes : episodes.join()\n            getEpisodes(episodes).then(response2 => {\n                console.log(response2)\n                setCharacterEpisodes(response2.data)\n                setLoading(false)\n            })\n        })\n    }, [])\n    return (\n        <>\n            <LoaderComp loading={loading}/>\n            {!loading && <Grid container stackable doubling>\n                <Grid.Row>\n                    <Grid.Column width={4}>\n                        <Image loading='lazy' circular src={\"/api/character/avatar/\" + character?.id + \".jpeg\"}/>\n                    </Grid.Column>\n                    <Grid.Column width={8}>\n                        <Header size=\"huge\">\n                            {character.name}\n                            <Header.Subheader>{character.species} / {character.gender}</Header.Subheader>\n                        </Header>\n                        <List>\n                            <List.Item>\n                                <List.Header>Origin Location</List.Header>\n                                {character?.origin?.name}\n                            </List.Item>\n                            <List.Item>\n                                <List.Header>Location</List.Header>\n                                {character?.location?.name}\n                            </List.Item>\n                        </List>\n                    </Grid.Column>\n                    <Grid.Column width={4}>\n                        <Header textAlign={\"center\"}>\n                            Status\n                        </Header>\n                        {imageSelector(character.status)}\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Header>Character Episodes</Header>\n                    <Card.Group centered doubling style={{marginTop: 18}}>\n                        {characterEpisodes.length > 1 ? <>{characterEpisodes?.map(episode => {\n                                return <EpisodeCard episode={episode} key={episode.id}/>\n                            })}</> :\n                            <Container><EpisodeCard episode={characterEpisodes}/></Container>\n                        }\n                    </Card.Group>\n                </Grid.Row>\n            </Grid>}\n        </>\n    );\n};\n\nexport default CharacterDetailsPage;","import React from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport {Container} from \"semantic-ui-react\";\nimport MainPage from \"../../pages/MainPage\";\nimport EpisodeDetailsPage from \"../../pages/EpisodeDetailsPage\";\nimport CharacterDetailsPage from \"../../pages/CharacterDetailsPage\";\n\n\nfunction PageRouter() {\n    return (\n        <Container style={{marginTop: 88}}>\n            <Switch>\n                <Route exact path=\"/animated-winner/\" component={MainPage}/>\n                <Route path=\"/animated-winner/episode-details/:id\" component={EpisodeDetailsPage}/>\n                <Route path=\"/animated-winner/character-details/:id\" component={CharacterDetailsPage}/>\n            </Switch>\n        </Container>\n    );\n}\n\nexport default PageRouter;","export default __webpack_public_path__ + \"static/media/iconfinder_rick_2981856.62f1c10d.png\";","import React from 'react';\nimport {Container, Image, Menu} from \"semantic-ui-react\";\nimport Icon from '../../assets/iconfinder_rick_2981856.png'\nimport {Link} from \"react-router-dom\";\n\nfunction NavBar() {\n    return (\n        <div>\n            <Menu fixed='top' stackable>\n                <Container>\n                    <Menu.Item as={Link} header to={\"/\"}>\n                        <Image size='mini' src={Icon} style={{marginRight: '1.5em'}}/>\n                        Rick And Morty\n                    </Menu.Item>\n                </Container>\n            </Menu>\n        </div>\n    );\n}\n\nexport default NavBar;","import PageRouter from \"./components/navigation/PageRouter\";\nimport 'semantic-ui-css/semantic.min.css'\nimport NavBar from \"./components/navigation/NavBar\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Router>\n                <NavBar/>\n                <PageRouter/>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}